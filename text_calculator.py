"""
Текстовый калькулятор.

Техническое задание:
    Программа принимает на вход строчку с примером на русском языке (целые числа и операции разделены пробелами)
    и печатает ответ в виде слов(а). В строчке могут использоваться слова (обозначающие целые числа) меньше миллиарда
    если число состоит из двух и более слов, то слова разделять "_" (сто_пять, тридцать_три, миллион_триста_тысяч);
    программа поддерживает сложение, вычитание, умножение, деление.
    (операции записывать так: плюс; минус; умножить на; поделить на)

    Все числа записаны в соответствии с правилами русского языка, а пример записан как читается.

    Программа не будет работать корректно, если входные данные введены не правильно.
    НЕ ПРАВИЛЬНО:
        * тысяча и две сотни умножить на один (так не читается пример)
        * милеон поделить на четыристо (орфографическая ошибка)
        * сто пятьдесят прибавить десять (нету "_", "прибавить" нужно заменить на "плюс")
        * пять увеличить в три раза (не звучит как пример)
        * 5*12039 (не текст)
        * one_hundred_thousand minus one (текст не на русском языке)

Входные данные:
три умножить на сто минус пять
# соответствует 3*100-5
ДВЕСТИ_ДЕВЯНОСТО_ПЯТЬ ( 295 )

два плюс два умножить на два
# соответствует (2+2)*2, а не 2+2*2
ВОСЕМЬ ( 8 )

сто_пятьдесят поделить на три
# соответствует 150/3
ПЯТЬДЕСЯТ ( 50 )

двадцать_девять плюс минус три
# соответствует 29+(-3)
ДВАДЦАТЬ_ШЕСТЬ ( 26 )

пятьсот минус шесть
# соответствует 500-6
ЧЕТЫРЕСТА_ДЕВЯНОСТО_ЧЕТЫРЕ ( 494 )

минус два умножить на три
# соответствует (-2)*3
МИНУС_ШЕСТЬ ( -6 )

миллион_триста плюс шестьсот
# соответствует 1000300+600
ОДИН_МИЛЛИОН_ДЕВЯТЬСОТ ( 1000900 )
"""

#словарь с числами и операциями
dict_digit_symbols={"ноль":0,"один":1,"два":2,"три":3,"четыре":4,"пять":5,"шесть":6,"семь":7,"восемь":8,"девять":9,
    "десять":10, "одиннадцать":11,"двенадцать":12,"тринадцать":13,"четырнадцать":14,"пятнадцать":15,"шестнадцать":16,
    "семнадцать":17, "восемнадцать":18,"девятнадцать":19, "двадцать":20, "тридцать":30,"сорок":40,"пятьдесят":50,
    "шестьдесят":60, "семьдесят":70,"восемьдесят":80,"девяносто":90, "сто":100, "двести":200, "триста":300,
    "четыреста":400, "пятьсот":500, "шестьсот":600, "семьсот":700, "восемьсот":800, "девятьсот":900, "тысяч":1000,
    "миллион":1000000,'плюс':'+','минус':'-','умножить':'*','поделить':'/'}


def convert_to_string(digit):
    """принимает целое число и выводит число на русском языке"""

    lst_0_20 = [i for i in dict_digit_symbols.keys()][:21] #список чисел(словами) от 0 до 20
    lst_20_90 = [i for i in dict_digit_symbols.keys()][20:28] #список чисел(словами) от 20 до 90
    lst_100_900 = [i for i in dict_digit_symbols.keys()][28:37] #список чисел(словами) от 100 до 900
    answer=[]
    if digit == 0:
        return "ноль"
    if digit<0:
        answer.append("минус")
    digit = abs(digit) #добавили минус если нужно и работает с положительным числом
    if digit!=0:
        # слова для миллионого разряда
        m=digit//10**6
        if m!=0:
            try:
                a=[i for i in dict_digit_symbols if dict_digit_symbols[i] == m] #ищем ключ при котором значение равно m
                if a: #если есть такой ключ, записываем в ответ
                    answer.append(*a)
                    answer.append("миллион")
                else:#уже из m будем считать
                    answer.append(convert_to_string(m))
                    answer.append("миллион")
            except:
                pass
            digit-=(digit//10**6)*10**6 #число без миллионов
        # слова для тысячного разряда
        m = digit // 10 ** 3
        if m != 0:
            try:
                a=[i for i in dict_digit_symbols if dict_digit_symbols[i]==m]#ищем ключ при котором значение равно m
                if a: #если есть такой ключ, записываем в ответ
                    answer.append(*a)
                    answer.append("тысяч")
                else: #уже из m будем считать
                    answer.append(convert_to_string(m))
                    answer.append("тысяч")
            except:
                pass
            digit-=(digit//10**3)*10**3 #число без тысяч
        # слова для разряда сотен
        if digit//10**2 != 0:
            try:
                a=[i for i in dict_digit_symbols if dict_digit_symbols[i]==digit]#ищем ключ при котором значение равно m
                if a:#если есть такой ключ, записываем в ответ
                    answer.append(*a)
                elif digit//100!=0:
                    a=digit//100
                    answer.append(lst_100_900[a-1]) #из списка сотен
            except:
                pass
            digit -= (digit // 10 ** 2) * 10 ** 2 #число без сотен
        # слова для разряда десятков
        if digit//10!=0:
            if 0 <= digit <= 20:
                #ищем ключ при котором значение равно digit
                answer.append(*[i for i in dict_digit_symbols if dict_digit_symbols[i] == digit])
                answer = "_".join(answer)  # соединияем список слов в одну строчку
                return answer
            else:
                a=digit//10
                answer.append(lst_20_90[a - 2]) #из списка десятков
                digit -= (digit // 10 ** 1) * 10 ** 1 #число без десятков
                # слова для разряда единиц
        if digit != 0:
            answer.append(lst_0_20[digit]) #из списка единиц

    answer="_".join(answer) #соединияем список слов в одну строчку
    return answer

def counter(symbol, digit): # последовательно совершаем операции
    global answer_digit
    if symbol == "+":
        answer_digit += digit
    elif symbol == "-":
        answer_digit -= digit
    elif symbol == "*":
        answer_digit *= digit
    elif symbol == "/":
        answer_digit /= digit
    return answer_digit

def convert_to_digit(lst_text):
    if lst_text.count("на")!=0:
        lst_text.remove("на")
    global answer_digit
    answer_digit=0
    symbol = "+" # стандартно первое число положительное
    for keys in lst_text:
        symbol_big_digit = "+"  # знак перед числом, по умолчанию считаем что число положительное
        try:
            """ошибка KeyError не должна выводиться если ввели число с "_" которого нет в библиотеке,
               но если ввели:  "№;%:?"%  то ошибка должна выводиться"""
            # знак перед каждым числом
            if keys.find("_")==-1: #условие чтобы не было ошибок KeyError для чисел с "_"
                if str(dict_digit_symbols[keys]) in "+-*/":
                    symbol = dict_digit_symbols[keys]  # выбор операции перед числом

            # подсчет чисел из двух и более слов
            if keys.find("_")!=-1: #если в слове есть "_"
                big_digit=0 # число с которым мы будем совершать операцию
                """в цикле мы находим значение числа"""
                for j in keys.split("_"): # отделяем слова и рассматриваем каждое отдельно
                    #если число отрицательное
                    if str(dict_digit_symbols[j])=="-":
                        symbol_big_digit = dict_digit_symbols[j]
                    else:
                        big_digit+=dict_digit_symbols[j]
                if symbol_big_digit=="-":
                    big_digit==-big_digit
                """совершаем заданную операцию с числом которое мы получили"""
                answer_digit=counter(symbol, big_digit)

                # подсчет чисел из одного числа
            if keys.find("_") == -1:
                if str(dict_digit_symbols[keys]) not in "+-*/":
                    answer_digit = counter(symbol, dict_digit_symbols[keys])
        except KeyError:
            return "oops"

    return answer_digit

def main(text):
    result=convert_to_digit(text.lower().split()) # из списка слов примера получаем ответ в виде числа

    if result=="oops": #если не существуют ключа библиотеки (значит были введены не предусмотренные слова)
        print("Не корректный ввод")
    elif int(result)==result: #если ответ целое число
        answer=convert_to_string(int(result)) # из числа переводим в слово
        print(answer.upper(), end=" ")
        print(f'( {int(result)} )')
    else:
        print("Ответ не является целым числом. Приблизительный ответ:")
        answer = convert_to_string(int(result)) # из числа переводим в слово
        print(answer.upper(), end=" ")
        print(f'( {result} )')

print('Напишите /help для большей информации.')
print()
while True: #программа будет работать пока не закрыть ее
    text=input() #список из чисел и операций/или команда
    if text=="/help":
        print('Программа принимает на вход строчку с примером на русском языке (целые числа и операции разделены пробелами)\n'
              'и печатает ответ в виде слов(а). В строчке могут использоваться слова (обозначающие целые числа) меньше миллиарда\n'
              'если число состоит из двух и более слов, то слова разделять "_" (сто_пять, тридцать_три, миллион_триста_тысяч);\n'
              'программа поддерживает сложение, вычитание, умножение, деление.\n'
              '(операции записывать так: плюс; минус; умножить на; поделить на)\n\n'

              'Все числа записаны в соответствии с правилами русского языка, а пример записан как читается.\n\n'

              'Программа не будет работать корректно, если входные данные введены не правильно.\n'
              'НЕ ПРАВИЛЬНО:\n'
              '* тысяча и две сотни умножить на один (так не читается пример)\n'
              '* милеон поделить на четыристо (орфографическая ошибка)\n'
              '* сто пятьдесят прибавить десять (нету "_", "прибавить" нужно заменить на "плюс")\n'
              '* пять увеличить в три раза (не звучит как пример)\n'
              '* 5*12039 (не текст)\n'
              '* one_hundred_thousand minus one (текст не на русском языке)\n')
        print()
    else:
        main(text)
        print()